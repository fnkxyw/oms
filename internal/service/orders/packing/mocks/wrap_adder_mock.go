// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i gitlab.ozon.dev/akugnerevich/homework.git/internal/service/orders/packing/controller.WrapAdder -o wrap_adder_mock_test.go -n WrapAdderMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// WrapAdderMock implements mm_controller.WrapAdder
type WrapAdderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddWrap          func() (b1 bool, err error)
	funcAddWrapOrigin    string
	inspectFuncAddWrap   func()
	afterAddWrapCounter  uint64
	beforeAddWrapCounter uint64
	AddWrapMock          mWrapAdderMockAddWrap
}

// NewWrapAdderMock returns a mock for mm_controller.WrapAdder
func NewWrapAdderMock(t minimock.Tester) *WrapAdderMock {
	m := &WrapAdderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddWrapMock = mWrapAdderMockAddWrap{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mWrapAdderMockAddWrap struct {
	optional           bool
	mock               *WrapAdderMock
	defaultExpectation *WrapAdderMockAddWrapExpectation
	expectations       []*WrapAdderMockAddWrapExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// WrapAdderMockAddWrapExpectation specifies expectation struct of the WrapAdder.AddWrap
type WrapAdderMockAddWrapExpectation struct {
	mock *WrapAdderMock

	results      *WrapAdderMockAddWrapResults
	returnOrigin string
	Counter      uint64
}

// WrapAdderMockAddWrapResults contains results of the WrapAdder.AddWrap
type WrapAdderMockAddWrapResults struct {
	b1  bool
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddWrap *mWrapAdderMockAddWrap) Optional() *mWrapAdderMockAddWrap {
	mmAddWrap.optional = true
	return mmAddWrap
}

// Expect sets up expected params for WrapAdder.AddWrap
func (mmAddWrap *mWrapAdderMockAddWrap) Expect() *mWrapAdderMockAddWrap {
	if mmAddWrap.mock.funcAddWrap != nil {
		mmAddWrap.mock.t.Fatalf("WrapAdderMock.AddWrap mock is already set by Set")
	}

	if mmAddWrap.defaultExpectation == nil {
		mmAddWrap.defaultExpectation = &WrapAdderMockAddWrapExpectation{}
	}

	return mmAddWrap
}

// Inspect accepts an inspector function that has same arguments as the WrapAdder.AddWrap
func (mmAddWrap *mWrapAdderMockAddWrap) Inspect(f func()) *mWrapAdderMockAddWrap {
	if mmAddWrap.mock.inspectFuncAddWrap != nil {
		mmAddWrap.mock.t.Fatalf("Inspect function is already set for WrapAdderMock.AddWrap")
	}

	mmAddWrap.mock.inspectFuncAddWrap = f

	return mmAddWrap
}

// Return sets up results that will be returned by WrapAdder.AddWrap
func (mmAddWrap *mWrapAdderMockAddWrap) Return(b1 bool, err error) *WrapAdderMock {
	if mmAddWrap.mock.funcAddWrap != nil {
		mmAddWrap.mock.t.Fatalf("WrapAdderMock.AddWrap mock is already set by Set")
	}

	if mmAddWrap.defaultExpectation == nil {
		mmAddWrap.defaultExpectation = &WrapAdderMockAddWrapExpectation{mock: mmAddWrap.mock}
	}
	mmAddWrap.defaultExpectation.results = &WrapAdderMockAddWrapResults{b1, err}
	mmAddWrap.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddWrap.mock
}

// Set uses given function f to mock the WrapAdder.AddWrap method
func (mmAddWrap *mWrapAdderMockAddWrap) Set(f func() (b1 bool, err error)) *WrapAdderMock {
	if mmAddWrap.defaultExpectation != nil {
		mmAddWrap.mock.t.Fatalf("Default expectation is already set for the WrapAdder.AddWrap method")
	}

	if len(mmAddWrap.expectations) > 0 {
		mmAddWrap.mock.t.Fatalf("Some expectations are already set for the WrapAdder.AddWrap method")
	}

	mmAddWrap.mock.funcAddWrap = f
	mmAddWrap.mock.funcAddWrapOrigin = minimock.CallerInfo(1)
	return mmAddWrap.mock
}

// Times sets number of times WrapAdder.AddWrap should be invoked
func (mmAddWrap *mWrapAdderMockAddWrap) Times(n uint64) *mWrapAdderMockAddWrap {
	if n == 0 {
		mmAddWrap.mock.t.Fatalf("Times of WrapAdderMock.AddWrap mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddWrap.expectedInvocations, n)
	mmAddWrap.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddWrap
}

func (mmAddWrap *mWrapAdderMockAddWrap) invocationsDone() bool {
	if len(mmAddWrap.expectations) == 0 && mmAddWrap.defaultExpectation == nil && mmAddWrap.mock.funcAddWrap == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddWrap.mock.afterAddWrapCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddWrap.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddWrap implements mm_controller.WrapAdder
func (mmAddWrap *WrapAdderMock) AddWrap() (b1 bool, err error) {
	mm_atomic.AddUint64(&mmAddWrap.beforeAddWrapCounter, 1)
	defer mm_atomic.AddUint64(&mmAddWrap.afterAddWrapCounter, 1)

	mmAddWrap.t.Helper()

	if mmAddWrap.inspectFuncAddWrap != nil {
		mmAddWrap.inspectFuncAddWrap()
	}

	if mmAddWrap.AddWrapMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddWrap.AddWrapMock.defaultExpectation.Counter, 1)

		mm_results := mmAddWrap.AddWrapMock.defaultExpectation.results
		if mm_results == nil {
			mmAddWrap.t.Fatal("No results are set for the WrapAdderMock.AddWrap")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmAddWrap.funcAddWrap != nil {
		return mmAddWrap.funcAddWrap()
	}
	mmAddWrap.t.Fatalf("Unexpected call to WrapAdderMock.AddWrap.")
	return
}

// AddWrapAfterCounter returns a count of finished WrapAdderMock.AddWrap invocations
func (mmAddWrap *WrapAdderMock) AddWrapAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddWrap.afterAddWrapCounter)
}

// AddWrapBeforeCounter returns a count of WrapAdderMock.AddWrap invocations
func (mmAddWrap *WrapAdderMock) AddWrapBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddWrap.beforeAddWrapCounter)
}

// MinimockAddWrapDone returns true if the count of the AddWrap invocations corresponds
// the number of defined expectations
func (m *WrapAdderMock) MinimockAddWrapDone() bool {
	if m.AddWrapMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddWrapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddWrapMock.invocationsDone()
}

// MinimockAddWrapInspect logs each unmet expectation
func (m *WrapAdderMock) MinimockAddWrapInspect() {
	for _, e := range m.AddWrapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to WrapAdderMock.AddWrap")
		}
	}

	afterAddWrapCounter := mm_atomic.LoadUint64(&m.afterAddWrapCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddWrapMock.defaultExpectation != nil && afterAddWrapCounter < 1 {
		m.t.Errorf("Expected call to WrapAdderMock.AddWrap at\n%s", m.AddWrapMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddWrap != nil && afterAddWrapCounter < 1 {
		m.t.Errorf("Expected call to WrapAdderMock.AddWrap at\n%s", m.funcAddWrapOrigin)
	}

	if !m.AddWrapMock.invocationsDone() && afterAddWrapCounter > 0 {
		m.t.Errorf("Expected %d calls to WrapAdderMock.AddWrap at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddWrapMock.expectedInvocations), m.AddWrapMock.expectedInvocationsOrigin, afterAddWrapCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *WrapAdderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddWrapInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *WrapAdderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *WrapAdderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddWrapDone()
}
