// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i gitlab.ozon.dev/akugnerevich/homework.git/internal/storage.Storage -o storage_mock_test.go -n StorageMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/akugnerevich/homework.git/internal/models"
)

// StorageMock implements mm_storage.Storage
type StorageMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddToStorage          func(order *models.Order)
	funcAddToStorageOrigin    string
	inspectFuncAddToStorage   func(order *models.Order)
	afterAddToStorageCounter  uint64
	beforeAddToStorageCounter uint64
	AddToStorageMock          mStorageMockAddToStorage

	funcDeleteFromStorage          func(id uint)
	funcDeleteFromStorageOrigin    string
	inspectFuncDeleteFromStorage   func(id uint)
	afterDeleteFromStorageCounter  uint64
	beforeDeleteFromStorageCounter uint64
	DeleteFromStorageMock          mStorageMockDeleteFromStorage

	funcGetIDs          func() (ua1 []uint)
	funcGetIDsOrigin    string
	inspectFuncGetIDs   func()
	afterGetIDsCounter  uint64
	beforeGetIDsCounter uint64
	GetIDsMock          mStorageMockGetIDs

	funcGetItem          func(id uint) (op1 *models.Order, b1 bool)
	funcGetItemOrigin    string
	inspectFuncGetItem   func(id uint)
	afterGetItemCounter  uint64
	beforeGetItemCounter uint64
	GetItemMock          mStorageMockGetItem

	funcIsConsist          func(id uint) (b1 bool)
	funcIsConsistOrigin    string
	inspectFuncIsConsist   func(id uint)
	afterIsConsistCounter  uint64
	beforeIsConsistCounter uint64
	IsConsistMock          mStorageMockIsConsist
}

// NewStorageMock returns a mock for mm_storage.Storage
func NewStorageMock(t minimock.Tester) *StorageMock {
	m := &StorageMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddToStorageMock = mStorageMockAddToStorage{mock: m}
	m.AddToStorageMock.callArgs = []*StorageMockAddToStorageParams{}

	m.DeleteFromStorageMock = mStorageMockDeleteFromStorage{mock: m}
	m.DeleteFromStorageMock.callArgs = []*StorageMockDeleteFromStorageParams{}

	m.GetIDsMock = mStorageMockGetIDs{mock: m}

	m.GetItemMock = mStorageMockGetItem{mock: m}
	m.GetItemMock.callArgs = []*StorageMockGetItemParams{}

	m.IsConsistMock = mStorageMockIsConsist{mock: m}
	m.IsConsistMock.callArgs = []*StorageMockIsConsistParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStorageMockAddToStorage struct {
	optional           bool
	mock               *StorageMock
	defaultExpectation *StorageMockAddToStorageExpectation
	expectations       []*StorageMockAddToStorageExpectation

	callArgs []*StorageMockAddToStorageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StorageMockAddToStorageExpectation specifies expectation struct of the Storage.AddToStorage
type StorageMockAddToStorageExpectation struct {
	mock               *StorageMock
	params             *StorageMockAddToStorageParams
	paramPtrs          *StorageMockAddToStorageParamPtrs
	expectationOrigins StorageMockAddToStorageExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// StorageMockAddToStorageParams contains parameters of the Storage.AddToStorage
type StorageMockAddToStorageParams struct {
	order *models.Order
}

// StorageMockAddToStorageParamPtrs contains pointers to parameters of the Storage.AddToStorage
type StorageMockAddToStorageParamPtrs struct {
	order **models.Order
}

// StorageMockAddToStorageOrigins contains origins of expectations of the Storage.AddToStorage
type StorageMockAddToStorageExpectationOrigins struct {
	origin      string
	originOrder string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddToStorage *mStorageMockAddToStorage) Optional() *mStorageMockAddToStorage {
	mmAddToStorage.optional = true
	return mmAddToStorage
}

// Expect sets up expected params for Storage.AddToStorage
func (mmAddToStorage *mStorageMockAddToStorage) Expect(order *models.Order) *mStorageMockAddToStorage {
	if mmAddToStorage.mock.funcAddToStorage != nil {
		mmAddToStorage.mock.t.Fatalf("StorageMock.AddToStorage mock is already set by Set")
	}

	if mmAddToStorage.defaultExpectation == nil {
		mmAddToStorage.defaultExpectation = &StorageMockAddToStorageExpectation{}
	}

	if mmAddToStorage.defaultExpectation.paramPtrs != nil {
		mmAddToStorage.mock.t.Fatalf("StorageMock.AddToStorage mock is already set by ExpectParams functions")
	}

	mmAddToStorage.defaultExpectation.params = &StorageMockAddToStorageParams{order}
	mmAddToStorage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddToStorage.expectations {
		if minimock.Equal(e.params, mmAddToStorage.defaultExpectation.params) {
			mmAddToStorage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddToStorage.defaultExpectation.params)
		}
	}

	return mmAddToStorage
}

// ExpectOrderParam1 sets up expected param order for Storage.AddToStorage
func (mmAddToStorage *mStorageMockAddToStorage) ExpectOrderParam1(order *models.Order) *mStorageMockAddToStorage {
	if mmAddToStorage.mock.funcAddToStorage != nil {
		mmAddToStorage.mock.t.Fatalf("StorageMock.AddToStorage mock is already set by Set")
	}

	if mmAddToStorage.defaultExpectation == nil {
		mmAddToStorage.defaultExpectation = &StorageMockAddToStorageExpectation{}
	}

	if mmAddToStorage.defaultExpectation.params != nil {
		mmAddToStorage.mock.t.Fatalf("StorageMock.AddToStorage mock is already set by Expect")
	}

	if mmAddToStorage.defaultExpectation.paramPtrs == nil {
		mmAddToStorage.defaultExpectation.paramPtrs = &StorageMockAddToStorageParamPtrs{}
	}
	mmAddToStorage.defaultExpectation.paramPtrs.order = &order
	mmAddToStorage.defaultExpectation.expectationOrigins.originOrder = minimock.CallerInfo(1)

	return mmAddToStorage
}

// Inspect accepts an inspector function that has same arguments as the Storage.AddToStorage
func (mmAddToStorage *mStorageMockAddToStorage) Inspect(f func(order *models.Order)) *mStorageMockAddToStorage {
	if mmAddToStorage.mock.inspectFuncAddToStorage != nil {
		mmAddToStorage.mock.t.Fatalf("Inspect function is already set for StorageMock.AddToStorage")
	}

	mmAddToStorage.mock.inspectFuncAddToStorage = f

	return mmAddToStorage
}

// Return sets up results that will be returned by Storage.AddToStorage
func (mmAddToStorage *mStorageMockAddToStorage) Return() *StorageMock {
	if mmAddToStorage.mock.funcAddToStorage != nil {
		mmAddToStorage.mock.t.Fatalf("StorageMock.AddToStorage mock is already set by Set")
	}

	if mmAddToStorage.defaultExpectation == nil {
		mmAddToStorage.defaultExpectation = &StorageMockAddToStorageExpectation{mock: mmAddToStorage.mock}
	}

	mmAddToStorage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddToStorage.mock
}

// Set uses given function f to mock the Storage.AddToStorage method
func (mmAddToStorage *mStorageMockAddToStorage) Set(f func(order *models.Order)) *StorageMock {
	if mmAddToStorage.defaultExpectation != nil {
		mmAddToStorage.mock.t.Fatalf("Default expectation is already set for the Storage.AddToStorage method")
	}

	if len(mmAddToStorage.expectations) > 0 {
		mmAddToStorage.mock.t.Fatalf("Some expectations are already set for the Storage.AddToStorage method")
	}

	mmAddToStorage.mock.funcAddToStorage = f
	mmAddToStorage.mock.funcAddToStorageOrigin = minimock.CallerInfo(1)
	return mmAddToStorage.mock
}

// Times sets number of times Storage.AddToStorage should be invoked
func (mmAddToStorage *mStorageMockAddToStorage) Times(n uint64) *mStorageMockAddToStorage {
	if n == 0 {
		mmAddToStorage.mock.t.Fatalf("Times of StorageMock.AddToStorage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddToStorage.expectedInvocations, n)
	mmAddToStorage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddToStorage
}

func (mmAddToStorage *mStorageMockAddToStorage) invocationsDone() bool {
	if len(mmAddToStorage.expectations) == 0 && mmAddToStorage.defaultExpectation == nil && mmAddToStorage.mock.funcAddToStorage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddToStorage.mock.afterAddToStorageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddToStorage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddToStorage implements mm_storage.Storage
func (mmAddToStorage *StorageMock) AddToStorage(order *models.Order) {
	mm_atomic.AddUint64(&mmAddToStorage.beforeAddToStorageCounter, 1)
	defer mm_atomic.AddUint64(&mmAddToStorage.afterAddToStorageCounter, 1)

	mmAddToStorage.t.Helper()

	if mmAddToStorage.inspectFuncAddToStorage != nil {
		mmAddToStorage.inspectFuncAddToStorage(order)
	}

	mm_params := StorageMockAddToStorageParams{order}

	// Record call args
	mmAddToStorage.AddToStorageMock.mutex.Lock()
	mmAddToStorage.AddToStorageMock.callArgs = append(mmAddToStorage.AddToStorageMock.callArgs, &mm_params)
	mmAddToStorage.AddToStorageMock.mutex.Unlock()

	for _, e := range mmAddToStorage.AddToStorageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddToStorage.AddToStorageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddToStorage.AddToStorageMock.defaultExpectation.Counter, 1)
		mm_want := mmAddToStorage.AddToStorageMock.defaultExpectation.params
		mm_want_ptrs := mmAddToStorage.AddToStorageMock.defaultExpectation.paramPtrs

		mm_got := StorageMockAddToStorageParams{order}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmAddToStorage.t.Errorf("StorageMock.AddToStorage got unexpected parameter order, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddToStorage.AddToStorageMock.defaultExpectation.expectationOrigins.originOrder, *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddToStorage.t.Errorf("StorageMock.AddToStorage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddToStorage.AddToStorageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddToStorage.funcAddToStorage != nil {
		mmAddToStorage.funcAddToStorage(order)
		return
	}
	mmAddToStorage.t.Fatalf("Unexpected call to StorageMock.AddToStorage. %v", order)

}

// AddToStorageAfterCounter returns a count of finished StorageMock.AddToStorage invocations
func (mmAddToStorage *StorageMock) AddToStorageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddToStorage.afterAddToStorageCounter)
}

// AddToStorageBeforeCounter returns a count of StorageMock.AddToStorage invocations
func (mmAddToStorage *StorageMock) AddToStorageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddToStorage.beforeAddToStorageCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.AddToStorage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddToStorage *mStorageMockAddToStorage) Calls() []*StorageMockAddToStorageParams {
	mmAddToStorage.mutex.RLock()

	argCopy := make([]*StorageMockAddToStorageParams, len(mmAddToStorage.callArgs))
	copy(argCopy, mmAddToStorage.callArgs)

	mmAddToStorage.mutex.RUnlock()

	return argCopy
}

// MinimockAddToStorageDone returns true if the count of the AddToStorage invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockAddToStorageDone() bool {
	if m.AddToStorageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddToStorageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddToStorageMock.invocationsDone()
}

// MinimockAddToStorageInspect logs each unmet expectation
func (m *StorageMock) MinimockAddToStorageInspect() {
	for _, e := range m.AddToStorageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.AddToStorage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddToStorageCounter := mm_atomic.LoadUint64(&m.afterAddToStorageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddToStorageMock.defaultExpectation != nil && afterAddToStorageCounter < 1 {
		if m.AddToStorageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StorageMock.AddToStorage at\n%s", m.AddToStorageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StorageMock.AddToStorage at\n%s with params: %#v", m.AddToStorageMock.defaultExpectation.expectationOrigins.origin, *m.AddToStorageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddToStorage != nil && afterAddToStorageCounter < 1 {
		m.t.Errorf("Expected call to StorageMock.AddToStorage at\n%s", m.funcAddToStorageOrigin)
	}

	if !m.AddToStorageMock.invocationsDone() && afterAddToStorageCounter > 0 {
		m.t.Errorf("Expected %d calls to StorageMock.AddToStorage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddToStorageMock.expectedInvocations), m.AddToStorageMock.expectedInvocationsOrigin, afterAddToStorageCounter)
	}
}

type mStorageMockDeleteFromStorage struct {
	optional           bool
	mock               *StorageMock
	defaultExpectation *StorageMockDeleteFromStorageExpectation
	expectations       []*StorageMockDeleteFromStorageExpectation

	callArgs []*StorageMockDeleteFromStorageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StorageMockDeleteFromStorageExpectation specifies expectation struct of the Storage.DeleteFromStorage
type StorageMockDeleteFromStorageExpectation struct {
	mock               *StorageMock
	params             *StorageMockDeleteFromStorageParams
	paramPtrs          *StorageMockDeleteFromStorageParamPtrs
	expectationOrigins StorageMockDeleteFromStorageExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// StorageMockDeleteFromStorageParams contains parameters of the Storage.DeleteFromStorage
type StorageMockDeleteFromStorageParams struct {
	id uint
}

// StorageMockDeleteFromStorageParamPtrs contains pointers to parameters of the Storage.DeleteFromStorage
type StorageMockDeleteFromStorageParamPtrs struct {
	id *uint
}

// StorageMockDeleteFromStorageOrigins contains origins of expectations of the Storage.DeleteFromStorage
type StorageMockDeleteFromStorageExpectationOrigins struct {
	origin   string
	originId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) Optional() *mStorageMockDeleteFromStorage {
	mmDeleteFromStorage.optional = true
	return mmDeleteFromStorage
}

// Expect sets up expected params for Storage.DeleteFromStorage
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) Expect(id uint) *mStorageMockDeleteFromStorage {
	if mmDeleteFromStorage.mock.funcDeleteFromStorage != nil {
		mmDeleteFromStorage.mock.t.Fatalf("StorageMock.DeleteFromStorage mock is already set by Set")
	}

	if mmDeleteFromStorage.defaultExpectation == nil {
		mmDeleteFromStorage.defaultExpectation = &StorageMockDeleteFromStorageExpectation{}
	}

	if mmDeleteFromStorage.defaultExpectation.paramPtrs != nil {
		mmDeleteFromStorage.mock.t.Fatalf("StorageMock.DeleteFromStorage mock is already set by ExpectParams functions")
	}

	mmDeleteFromStorage.defaultExpectation.params = &StorageMockDeleteFromStorageParams{id}
	mmDeleteFromStorage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteFromStorage.expectations {
		if minimock.Equal(e.params, mmDeleteFromStorage.defaultExpectation.params) {
			mmDeleteFromStorage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteFromStorage.defaultExpectation.params)
		}
	}

	return mmDeleteFromStorage
}

// ExpectIdParam1 sets up expected param id for Storage.DeleteFromStorage
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) ExpectIdParam1(id uint) *mStorageMockDeleteFromStorage {
	if mmDeleteFromStorage.mock.funcDeleteFromStorage != nil {
		mmDeleteFromStorage.mock.t.Fatalf("StorageMock.DeleteFromStorage mock is already set by Set")
	}

	if mmDeleteFromStorage.defaultExpectation == nil {
		mmDeleteFromStorage.defaultExpectation = &StorageMockDeleteFromStorageExpectation{}
	}

	if mmDeleteFromStorage.defaultExpectation.params != nil {
		mmDeleteFromStorage.mock.t.Fatalf("StorageMock.DeleteFromStorage mock is already set by Expect")
	}

	if mmDeleteFromStorage.defaultExpectation.paramPtrs == nil {
		mmDeleteFromStorage.defaultExpectation.paramPtrs = &StorageMockDeleteFromStorageParamPtrs{}
	}
	mmDeleteFromStorage.defaultExpectation.paramPtrs.id = &id
	mmDeleteFromStorage.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDeleteFromStorage
}

// Inspect accepts an inspector function that has same arguments as the Storage.DeleteFromStorage
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) Inspect(f func(id uint)) *mStorageMockDeleteFromStorage {
	if mmDeleteFromStorage.mock.inspectFuncDeleteFromStorage != nil {
		mmDeleteFromStorage.mock.t.Fatalf("Inspect function is already set for StorageMock.DeleteFromStorage")
	}

	mmDeleteFromStorage.mock.inspectFuncDeleteFromStorage = f

	return mmDeleteFromStorage
}

// Return sets up results that will be returned by Storage.DeleteFromStorage
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) Return() *StorageMock {
	if mmDeleteFromStorage.mock.funcDeleteFromStorage != nil {
		mmDeleteFromStorage.mock.t.Fatalf("StorageMock.DeleteFromStorage mock is already set by Set")
	}

	if mmDeleteFromStorage.defaultExpectation == nil {
		mmDeleteFromStorage.defaultExpectation = &StorageMockDeleteFromStorageExpectation{mock: mmDeleteFromStorage.mock}
	}

	mmDeleteFromStorage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteFromStorage.mock
}

// Set uses given function f to mock the Storage.DeleteFromStorage method
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) Set(f func(id uint)) *StorageMock {
	if mmDeleteFromStorage.defaultExpectation != nil {
		mmDeleteFromStorage.mock.t.Fatalf("Default expectation is already set for the Storage.DeleteFromStorage method")
	}

	if len(mmDeleteFromStorage.expectations) > 0 {
		mmDeleteFromStorage.mock.t.Fatalf("Some expectations are already set for the Storage.DeleteFromStorage method")
	}

	mmDeleteFromStorage.mock.funcDeleteFromStorage = f
	mmDeleteFromStorage.mock.funcDeleteFromStorageOrigin = minimock.CallerInfo(1)
	return mmDeleteFromStorage.mock
}

// Times sets number of times Storage.DeleteFromStorage should be invoked
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) Times(n uint64) *mStorageMockDeleteFromStorage {
	if n == 0 {
		mmDeleteFromStorage.mock.t.Fatalf("Times of StorageMock.DeleteFromStorage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteFromStorage.expectedInvocations, n)
	mmDeleteFromStorage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteFromStorage
}

func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) invocationsDone() bool {
	if len(mmDeleteFromStorage.expectations) == 0 && mmDeleteFromStorage.defaultExpectation == nil && mmDeleteFromStorage.mock.funcDeleteFromStorage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteFromStorage.mock.afterDeleteFromStorageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteFromStorage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteFromStorage implements mm_storage.Storage
func (mmDeleteFromStorage *StorageMock) DeleteFromStorage(id uint) {
	mm_atomic.AddUint64(&mmDeleteFromStorage.beforeDeleteFromStorageCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteFromStorage.afterDeleteFromStorageCounter, 1)

	mmDeleteFromStorage.t.Helper()

	if mmDeleteFromStorage.inspectFuncDeleteFromStorage != nil {
		mmDeleteFromStorage.inspectFuncDeleteFromStorage(id)
	}

	mm_params := StorageMockDeleteFromStorageParams{id}

	// Record call args
	mmDeleteFromStorage.DeleteFromStorageMock.mutex.Lock()
	mmDeleteFromStorage.DeleteFromStorageMock.callArgs = append(mmDeleteFromStorage.DeleteFromStorageMock.callArgs, &mm_params)
	mmDeleteFromStorage.DeleteFromStorageMock.mutex.Unlock()

	for _, e := range mmDeleteFromStorage.DeleteFromStorageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmDeleteFromStorage.DeleteFromStorageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteFromStorage.DeleteFromStorageMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteFromStorage.DeleteFromStorageMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteFromStorage.DeleteFromStorageMock.defaultExpectation.paramPtrs

		mm_got := StorageMockDeleteFromStorageParams{id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteFromStorage.t.Errorf("StorageMock.DeleteFromStorage got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteFromStorage.DeleteFromStorageMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteFromStorage.t.Errorf("StorageMock.DeleteFromStorage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteFromStorage.DeleteFromStorageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmDeleteFromStorage.funcDeleteFromStorage != nil {
		mmDeleteFromStorage.funcDeleteFromStorage(id)
		return
	}
	mmDeleteFromStorage.t.Fatalf("Unexpected call to StorageMock.DeleteFromStorage. %v", id)

}

// DeleteFromStorageAfterCounter returns a count of finished StorageMock.DeleteFromStorage invocations
func (mmDeleteFromStorage *StorageMock) DeleteFromStorageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteFromStorage.afterDeleteFromStorageCounter)
}

// DeleteFromStorageBeforeCounter returns a count of StorageMock.DeleteFromStorage invocations
func (mmDeleteFromStorage *StorageMock) DeleteFromStorageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteFromStorage.beforeDeleteFromStorageCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.DeleteFromStorage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteFromStorage *mStorageMockDeleteFromStorage) Calls() []*StorageMockDeleteFromStorageParams {
	mmDeleteFromStorage.mutex.RLock()

	argCopy := make([]*StorageMockDeleteFromStorageParams, len(mmDeleteFromStorage.callArgs))
	copy(argCopy, mmDeleteFromStorage.callArgs)

	mmDeleteFromStorage.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteFromStorageDone returns true if the count of the DeleteFromStorage invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockDeleteFromStorageDone() bool {
	if m.DeleteFromStorageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteFromStorageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteFromStorageMock.invocationsDone()
}

// MinimockDeleteFromStorageInspect logs each unmet expectation
func (m *StorageMock) MinimockDeleteFromStorageInspect() {
	for _, e := range m.DeleteFromStorageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.DeleteFromStorage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteFromStorageCounter := mm_atomic.LoadUint64(&m.afterDeleteFromStorageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteFromStorageMock.defaultExpectation != nil && afterDeleteFromStorageCounter < 1 {
		if m.DeleteFromStorageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StorageMock.DeleteFromStorage at\n%s", m.DeleteFromStorageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StorageMock.DeleteFromStorage at\n%s with params: %#v", m.DeleteFromStorageMock.defaultExpectation.expectationOrigins.origin, *m.DeleteFromStorageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteFromStorage != nil && afterDeleteFromStorageCounter < 1 {
		m.t.Errorf("Expected call to StorageMock.DeleteFromStorage at\n%s", m.funcDeleteFromStorageOrigin)
	}

	if !m.DeleteFromStorageMock.invocationsDone() && afterDeleteFromStorageCounter > 0 {
		m.t.Errorf("Expected %d calls to StorageMock.DeleteFromStorage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteFromStorageMock.expectedInvocations), m.DeleteFromStorageMock.expectedInvocationsOrigin, afterDeleteFromStorageCounter)
	}
}

type mStorageMockGetIDs struct {
	optional           bool
	mock               *StorageMock
	defaultExpectation *StorageMockGetIDsExpectation
	expectations       []*StorageMockGetIDsExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StorageMockGetIDsExpectation specifies expectation struct of the Storage.GetIDs
type StorageMockGetIDsExpectation struct {
	mock *StorageMock

	results      *StorageMockGetIDsResults
	returnOrigin string
	Counter      uint64
}

// StorageMockGetIDsResults contains results of the Storage.GetIDs
type StorageMockGetIDsResults struct {
	ua1 []uint
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetIDs *mStorageMockGetIDs) Optional() *mStorageMockGetIDs {
	mmGetIDs.optional = true
	return mmGetIDs
}

// Expect sets up expected params for Storage.GetIDs
func (mmGetIDs *mStorageMockGetIDs) Expect() *mStorageMockGetIDs {
	if mmGetIDs.mock.funcGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("StorageMock.GetIDs mock is already set by Set")
	}

	if mmGetIDs.defaultExpectation == nil {
		mmGetIDs.defaultExpectation = &StorageMockGetIDsExpectation{}
	}

	return mmGetIDs
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetIDs
func (mmGetIDs *mStorageMockGetIDs) Inspect(f func()) *mStorageMockGetIDs {
	if mmGetIDs.mock.inspectFuncGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("Inspect function is already set for StorageMock.GetIDs")
	}

	mmGetIDs.mock.inspectFuncGetIDs = f

	return mmGetIDs
}

// Return sets up results that will be returned by Storage.GetIDs
func (mmGetIDs *mStorageMockGetIDs) Return(ua1 []uint) *StorageMock {
	if mmGetIDs.mock.funcGetIDs != nil {
		mmGetIDs.mock.t.Fatalf("StorageMock.GetIDs mock is already set by Set")
	}

	if mmGetIDs.defaultExpectation == nil {
		mmGetIDs.defaultExpectation = &StorageMockGetIDsExpectation{mock: mmGetIDs.mock}
	}
	mmGetIDs.defaultExpectation.results = &StorageMockGetIDsResults{ua1}
	mmGetIDs.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetIDs.mock
}

// Set uses given function f to mock the Storage.GetIDs method
func (mmGetIDs *mStorageMockGetIDs) Set(f func() (ua1 []uint)) *StorageMock {
	if mmGetIDs.defaultExpectation != nil {
		mmGetIDs.mock.t.Fatalf("Default expectation is already set for the Storage.GetIDs method")
	}

	if len(mmGetIDs.expectations) > 0 {
		mmGetIDs.mock.t.Fatalf("Some expectations are already set for the Storage.GetIDs method")
	}

	mmGetIDs.mock.funcGetIDs = f
	mmGetIDs.mock.funcGetIDsOrigin = minimock.CallerInfo(1)
	return mmGetIDs.mock
}

// Times sets number of times Storage.GetIDs should be invoked
func (mmGetIDs *mStorageMockGetIDs) Times(n uint64) *mStorageMockGetIDs {
	if n == 0 {
		mmGetIDs.mock.t.Fatalf("Times of StorageMock.GetIDs mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetIDs.expectedInvocations, n)
	mmGetIDs.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetIDs
}

func (mmGetIDs *mStorageMockGetIDs) invocationsDone() bool {
	if len(mmGetIDs.expectations) == 0 && mmGetIDs.defaultExpectation == nil && mmGetIDs.mock.funcGetIDs == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetIDs.mock.afterGetIDsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetIDs.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetIDs implements mm_storage.Storage
func (mmGetIDs *StorageMock) GetIDs() (ua1 []uint) {
	mm_atomic.AddUint64(&mmGetIDs.beforeGetIDsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIDs.afterGetIDsCounter, 1)

	mmGetIDs.t.Helper()

	if mmGetIDs.inspectFuncGetIDs != nil {
		mmGetIDs.inspectFuncGetIDs()
	}

	if mmGetIDs.GetIDsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIDs.GetIDsMock.defaultExpectation.Counter, 1)

		mm_results := mmGetIDs.GetIDsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetIDs.t.Fatal("No results are set for the StorageMock.GetIDs")
		}
		return (*mm_results).ua1
	}
	if mmGetIDs.funcGetIDs != nil {
		return mmGetIDs.funcGetIDs()
	}
	mmGetIDs.t.Fatalf("Unexpected call to StorageMock.GetIDs.")
	return
}

// GetIDsAfterCounter returns a count of finished StorageMock.GetIDs invocations
func (mmGetIDs *StorageMock) GetIDsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIDs.afterGetIDsCounter)
}

// GetIDsBeforeCounter returns a count of StorageMock.GetIDs invocations
func (mmGetIDs *StorageMock) GetIDsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIDs.beforeGetIDsCounter)
}

// MinimockGetIDsDone returns true if the count of the GetIDs invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetIDsDone() bool {
	if m.GetIDsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetIDsMock.invocationsDone()
}

// MinimockGetIDsInspect logs each unmet expectation
func (m *StorageMock) MinimockGetIDsInspect() {
	for _, e := range m.GetIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StorageMock.GetIDs")
		}
	}

	afterGetIDsCounter := mm_atomic.LoadUint64(&m.afterGetIDsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetIDsMock.defaultExpectation != nil && afterGetIDsCounter < 1 {
		m.t.Errorf("Expected call to StorageMock.GetIDs at\n%s", m.GetIDsMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIDs != nil && afterGetIDsCounter < 1 {
		m.t.Errorf("Expected call to StorageMock.GetIDs at\n%s", m.funcGetIDsOrigin)
	}

	if !m.GetIDsMock.invocationsDone() && afterGetIDsCounter > 0 {
		m.t.Errorf("Expected %d calls to StorageMock.GetIDs at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetIDsMock.expectedInvocations), m.GetIDsMock.expectedInvocationsOrigin, afterGetIDsCounter)
	}
}

type mStorageMockGetItem struct {
	optional           bool
	mock               *StorageMock
	defaultExpectation *StorageMockGetItemExpectation
	expectations       []*StorageMockGetItemExpectation

	callArgs []*StorageMockGetItemParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StorageMockGetItemExpectation specifies expectation struct of the Storage.GetItem
type StorageMockGetItemExpectation struct {
	mock               *StorageMock
	params             *StorageMockGetItemParams
	paramPtrs          *StorageMockGetItemParamPtrs
	expectationOrigins StorageMockGetItemExpectationOrigins
	results            *StorageMockGetItemResults
	returnOrigin       string
	Counter            uint64
}

// StorageMockGetItemParams contains parameters of the Storage.GetItem
type StorageMockGetItemParams struct {
	id uint
}

// StorageMockGetItemParamPtrs contains pointers to parameters of the Storage.GetItem
type StorageMockGetItemParamPtrs struct {
	id *uint
}

// StorageMockGetItemResults contains results of the Storage.GetItem
type StorageMockGetItemResults struct {
	op1 *models.Order
	b1  bool
}

// StorageMockGetItemOrigins contains origins of expectations of the Storage.GetItem
type StorageMockGetItemExpectationOrigins struct {
	origin   string
	originId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetItem *mStorageMockGetItem) Optional() *mStorageMockGetItem {
	mmGetItem.optional = true
	return mmGetItem
}

// Expect sets up expected params for Storage.GetItem
func (mmGetItem *mStorageMockGetItem) Expect(id uint) *mStorageMockGetItem {
	if mmGetItem.mock.funcGetItem != nil {
		mmGetItem.mock.t.Fatalf("StorageMock.GetItem mock is already set by Set")
	}

	if mmGetItem.defaultExpectation == nil {
		mmGetItem.defaultExpectation = &StorageMockGetItemExpectation{}
	}

	if mmGetItem.defaultExpectation.paramPtrs != nil {
		mmGetItem.mock.t.Fatalf("StorageMock.GetItem mock is already set by ExpectParams functions")
	}

	mmGetItem.defaultExpectation.params = &StorageMockGetItemParams{id}
	mmGetItem.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetItem.expectations {
		if minimock.Equal(e.params, mmGetItem.defaultExpectation.params) {
			mmGetItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetItem.defaultExpectation.params)
		}
	}

	return mmGetItem
}

// ExpectIdParam1 sets up expected param id for Storage.GetItem
func (mmGetItem *mStorageMockGetItem) ExpectIdParam1(id uint) *mStorageMockGetItem {
	if mmGetItem.mock.funcGetItem != nil {
		mmGetItem.mock.t.Fatalf("StorageMock.GetItem mock is already set by Set")
	}

	if mmGetItem.defaultExpectation == nil {
		mmGetItem.defaultExpectation = &StorageMockGetItemExpectation{}
	}

	if mmGetItem.defaultExpectation.params != nil {
		mmGetItem.mock.t.Fatalf("StorageMock.GetItem mock is already set by Expect")
	}

	if mmGetItem.defaultExpectation.paramPtrs == nil {
		mmGetItem.defaultExpectation.paramPtrs = &StorageMockGetItemParamPtrs{}
	}
	mmGetItem.defaultExpectation.paramPtrs.id = &id
	mmGetItem.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGetItem
}

// Inspect accepts an inspector function that has same arguments as the Storage.GetItem
func (mmGetItem *mStorageMockGetItem) Inspect(f func(id uint)) *mStorageMockGetItem {
	if mmGetItem.mock.inspectFuncGetItem != nil {
		mmGetItem.mock.t.Fatalf("Inspect function is already set for StorageMock.GetItem")
	}

	mmGetItem.mock.inspectFuncGetItem = f

	return mmGetItem
}

// Return sets up results that will be returned by Storage.GetItem
func (mmGetItem *mStorageMockGetItem) Return(op1 *models.Order, b1 bool) *StorageMock {
	if mmGetItem.mock.funcGetItem != nil {
		mmGetItem.mock.t.Fatalf("StorageMock.GetItem mock is already set by Set")
	}

	if mmGetItem.defaultExpectation == nil {
		mmGetItem.defaultExpectation = &StorageMockGetItemExpectation{mock: mmGetItem.mock}
	}
	mmGetItem.defaultExpectation.results = &StorageMockGetItemResults{op1, b1}
	mmGetItem.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetItem.mock
}

// Set uses given function f to mock the Storage.GetItem method
func (mmGetItem *mStorageMockGetItem) Set(f func(id uint) (op1 *models.Order, b1 bool)) *StorageMock {
	if mmGetItem.defaultExpectation != nil {
		mmGetItem.mock.t.Fatalf("Default expectation is already set for the Storage.GetItem method")
	}

	if len(mmGetItem.expectations) > 0 {
		mmGetItem.mock.t.Fatalf("Some expectations are already set for the Storage.GetItem method")
	}

	mmGetItem.mock.funcGetItem = f
	mmGetItem.mock.funcGetItemOrigin = minimock.CallerInfo(1)
	return mmGetItem.mock
}

// When sets expectation for the Storage.GetItem which will trigger the result defined by the following
// Then helper
func (mmGetItem *mStorageMockGetItem) When(id uint) *StorageMockGetItemExpectation {
	if mmGetItem.mock.funcGetItem != nil {
		mmGetItem.mock.t.Fatalf("StorageMock.GetItem mock is already set by Set")
	}

	expectation := &StorageMockGetItemExpectation{
		mock:               mmGetItem.mock,
		params:             &StorageMockGetItemParams{id},
		expectationOrigins: StorageMockGetItemExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetItem.expectations = append(mmGetItem.expectations, expectation)
	return expectation
}

// Then sets up Storage.GetItem return parameters for the expectation previously defined by the When method
func (e *StorageMockGetItemExpectation) Then(op1 *models.Order, b1 bool) *StorageMock {
	e.results = &StorageMockGetItemResults{op1, b1}
	return e.mock
}

// Times sets number of times Storage.GetItem should be invoked
func (mmGetItem *mStorageMockGetItem) Times(n uint64) *mStorageMockGetItem {
	if n == 0 {
		mmGetItem.mock.t.Fatalf("Times of StorageMock.GetItem mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetItem.expectedInvocations, n)
	mmGetItem.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetItem
}

func (mmGetItem *mStorageMockGetItem) invocationsDone() bool {
	if len(mmGetItem.expectations) == 0 && mmGetItem.defaultExpectation == nil && mmGetItem.mock.funcGetItem == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetItem.mock.afterGetItemCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetItem.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetItem implements mm_storage.Storage
func (mmGetItem *StorageMock) GetItem(id uint) (op1 *models.Order, b1 bool) {
	mm_atomic.AddUint64(&mmGetItem.beforeGetItemCounter, 1)
	defer mm_atomic.AddUint64(&mmGetItem.afterGetItemCounter, 1)

	mmGetItem.t.Helper()

	if mmGetItem.inspectFuncGetItem != nil {
		mmGetItem.inspectFuncGetItem(id)
	}

	mm_params := StorageMockGetItemParams{id}

	// Record call args
	mmGetItem.GetItemMock.mutex.Lock()
	mmGetItem.GetItemMock.callArgs = append(mmGetItem.GetItemMock.callArgs, &mm_params)
	mmGetItem.GetItemMock.mutex.Unlock()

	for _, e := range mmGetItem.GetItemMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.b1
		}
	}

	if mmGetItem.GetItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetItem.GetItemMock.defaultExpectation.Counter, 1)
		mm_want := mmGetItem.GetItemMock.defaultExpectation.params
		mm_want_ptrs := mmGetItem.GetItemMock.defaultExpectation.paramPtrs

		mm_got := StorageMockGetItemParams{id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetItem.t.Errorf("StorageMock.GetItem got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetItem.GetItemMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetItem.t.Errorf("StorageMock.GetItem got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetItem.GetItemMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetItem.GetItemMock.defaultExpectation.results
		if mm_results == nil {
			mmGetItem.t.Fatal("No results are set for the StorageMock.GetItem")
		}
		return (*mm_results).op1, (*mm_results).b1
	}
	if mmGetItem.funcGetItem != nil {
		return mmGetItem.funcGetItem(id)
	}
	mmGetItem.t.Fatalf("Unexpected call to StorageMock.GetItem. %v", id)
	return
}

// GetItemAfterCounter returns a count of finished StorageMock.GetItem invocations
func (mmGetItem *StorageMock) GetItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItem.afterGetItemCounter)
}

// GetItemBeforeCounter returns a count of StorageMock.GetItem invocations
func (mmGetItem *StorageMock) GetItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItem.beforeGetItemCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.GetItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetItem *mStorageMockGetItem) Calls() []*StorageMockGetItemParams {
	mmGetItem.mutex.RLock()

	argCopy := make([]*StorageMockGetItemParams, len(mmGetItem.callArgs))
	copy(argCopy, mmGetItem.callArgs)

	mmGetItem.mutex.RUnlock()

	return argCopy
}

// MinimockGetItemDone returns true if the count of the GetItem invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockGetItemDone() bool {
	if m.GetItemMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetItemMock.invocationsDone()
}

// MinimockGetItemInspect logs each unmet expectation
func (m *StorageMock) MinimockGetItemInspect() {
	for _, e := range m.GetItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.GetItem at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetItemCounter := mm_atomic.LoadUint64(&m.afterGetItemCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemMock.defaultExpectation != nil && afterGetItemCounter < 1 {
		if m.GetItemMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StorageMock.GetItem at\n%s", m.GetItemMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StorageMock.GetItem at\n%s with params: %#v", m.GetItemMock.defaultExpectation.expectationOrigins.origin, *m.GetItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItem != nil && afterGetItemCounter < 1 {
		m.t.Errorf("Expected call to StorageMock.GetItem at\n%s", m.funcGetItemOrigin)
	}

	if !m.GetItemMock.invocationsDone() && afterGetItemCounter > 0 {
		m.t.Errorf("Expected %d calls to StorageMock.GetItem at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetItemMock.expectedInvocations), m.GetItemMock.expectedInvocationsOrigin, afterGetItemCounter)
	}
}

type mStorageMockIsConsist struct {
	optional           bool
	mock               *StorageMock
	defaultExpectation *StorageMockIsConsistExpectation
	expectations       []*StorageMockIsConsistExpectation

	callArgs []*StorageMockIsConsistParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StorageMockIsConsistExpectation specifies expectation struct of the Storage.IsConsist
type StorageMockIsConsistExpectation struct {
	mock               *StorageMock
	params             *StorageMockIsConsistParams
	paramPtrs          *StorageMockIsConsistParamPtrs
	expectationOrigins StorageMockIsConsistExpectationOrigins
	results            *StorageMockIsConsistResults
	returnOrigin       string
	Counter            uint64
}

// StorageMockIsConsistParams contains parameters of the Storage.IsConsist
type StorageMockIsConsistParams struct {
	id uint
}

// StorageMockIsConsistParamPtrs contains pointers to parameters of the Storage.IsConsist
type StorageMockIsConsistParamPtrs struct {
	id *uint
}

// StorageMockIsConsistResults contains results of the Storage.IsConsist
type StorageMockIsConsistResults struct {
	b1 bool
}

// StorageMockIsConsistOrigins contains origins of expectations of the Storage.IsConsist
type StorageMockIsConsistExpectationOrigins struct {
	origin   string
	originId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmIsConsist *mStorageMockIsConsist) Optional() *mStorageMockIsConsist {
	mmIsConsist.optional = true
	return mmIsConsist
}

// Expect sets up expected params for Storage.IsConsist
func (mmIsConsist *mStorageMockIsConsist) Expect(id uint) *mStorageMockIsConsist {
	if mmIsConsist.mock.funcIsConsist != nil {
		mmIsConsist.mock.t.Fatalf("StorageMock.IsConsist mock is already set by Set")
	}

	if mmIsConsist.defaultExpectation == nil {
		mmIsConsist.defaultExpectation = &StorageMockIsConsistExpectation{}
	}

	if mmIsConsist.defaultExpectation.paramPtrs != nil {
		mmIsConsist.mock.t.Fatalf("StorageMock.IsConsist mock is already set by ExpectParams functions")
	}

	mmIsConsist.defaultExpectation.params = &StorageMockIsConsistParams{id}
	mmIsConsist.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmIsConsist.expectations {
		if minimock.Equal(e.params, mmIsConsist.defaultExpectation.params) {
			mmIsConsist.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmIsConsist.defaultExpectation.params)
		}
	}

	return mmIsConsist
}

// ExpectIdParam1 sets up expected param id for Storage.IsConsist
func (mmIsConsist *mStorageMockIsConsist) ExpectIdParam1(id uint) *mStorageMockIsConsist {
	if mmIsConsist.mock.funcIsConsist != nil {
		mmIsConsist.mock.t.Fatalf("StorageMock.IsConsist mock is already set by Set")
	}

	if mmIsConsist.defaultExpectation == nil {
		mmIsConsist.defaultExpectation = &StorageMockIsConsistExpectation{}
	}

	if mmIsConsist.defaultExpectation.params != nil {
		mmIsConsist.mock.t.Fatalf("StorageMock.IsConsist mock is already set by Expect")
	}

	if mmIsConsist.defaultExpectation.paramPtrs == nil {
		mmIsConsist.defaultExpectation.paramPtrs = &StorageMockIsConsistParamPtrs{}
	}
	mmIsConsist.defaultExpectation.paramPtrs.id = &id
	mmIsConsist.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmIsConsist
}

// Inspect accepts an inspector function that has same arguments as the Storage.IsConsist
func (mmIsConsist *mStorageMockIsConsist) Inspect(f func(id uint)) *mStorageMockIsConsist {
	if mmIsConsist.mock.inspectFuncIsConsist != nil {
		mmIsConsist.mock.t.Fatalf("Inspect function is already set for StorageMock.IsConsist")
	}

	mmIsConsist.mock.inspectFuncIsConsist = f

	return mmIsConsist
}

// Return sets up results that will be returned by Storage.IsConsist
func (mmIsConsist *mStorageMockIsConsist) Return(b1 bool) *StorageMock {
	if mmIsConsist.mock.funcIsConsist != nil {
		mmIsConsist.mock.t.Fatalf("StorageMock.IsConsist mock is already set by Set")
	}

	if mmIsConsist.defaultExpectation == nil {
		mmIsConsist.defaultExpectation = &StorageMockIsConsistExpectation{mock: mmIsConsist.mock}
	}
	mmIsConsist.defaultExpectation.results = &StorageMockIsConsistResults{b1}
	mmIsConsist.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmIsConsist.mock
}

// Set uses given function f to mock the Storage.IsConsist method
func (mmIsConsist *mStorageMockIsConsist) Set(f func(id uint) (b1 bool)) *StorageMock {
	if mmIsConsist.defaultExpectation != nil {
		mmIsConsist.mock.t.Fatalf("Default expectation is already set for the Storage.IsConsist method")
	}

	if len(mmIsConsist.expectations) > 0 {
		mmIsConsist.mock.t.Fatalf("Some expectations are already set for the Storage.IsConsist method")
	}

	mmIsConsist.mock.funcIsConsist = f
	mmIsConsist.mock.funcIsConsistOrigin = minimock.CallerInfo(1)
	return mmIsConsist.mock
}

// When sets expectation for the Storage.IsConsist which will trigger the result defined by the following
// Then helper
func (mmIsConsist *mStorageMockIsConsist) When(id uint) *StorageMockIsConsistExpectation {
	if mmIsConsist.mock.funcIsConsist != nil {
		mmIsConsist.mock.t.Fatalf("StorageMock.IsConsist mock is already set by Set")
	}

	expectation := &StorageMockIsConsistExpectation{
		mock:               mmIsConsist.mock,
		params:             &StorageMockIsConsistParams{id},
		expectationOrigins: StorageMockIsConsistExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmIsConsist.expectations = append(mmIsConsist.expectations, expectation)
	return expectation
}

// Then sets up Storage.IsConsist return parameters for the expectation previously defined by the When method
func (e *StorageMockIsConsistExpectation) Then(b1 bool) *StorageMock {
	e.results = &StorageMockIsConsistResults{b1}
	return e.mock
}

// Times sets number of times Storage.IsConsist should be invoked
func (mmIsConsist *mStorageMockIsConsist) Times(n uint64) *mStorageMockIsConsist {
	if n == 0 {
		mmIsConsist.mock.t.Fatalf("Times of StorageMock.IsConsist mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmIsConsist.expectedInvocations, n)
	mmIsConsist.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmIsConsist
}

func (mmIsConsist *mStorageMockIsConsist) invocationsDone() bool {
	if len(mmIsConsist.expectations) == 0 && mmIsConsist.defaultExpectation == nil && mmIsConsist.mock.funcIsConsist == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmIsConsist.mock.afterIsConsistCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmIsConsist.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// IsConsist implements mm_storage.Storage
func (mmIsConsist *StorageMock) IsConsist(id uint) (b1 bool) {
	mm_atomic.AddUint64(&mmIsConsist.beforeIsConsistCounter, 1)
	defer mm_atomic.AddUint64(&mmIsConsist.afterIsConsistCounter, 1)

	mmIsConsist.t.Helper()

	if mmIsConsist.inspectFuncIsConsist != nil {
		mmIsConsist.inspectFuncIsConsist(id)
	}

	mm_params := StorageMockIsConsistParams{id}

	// Record call args
	mmIsConsist.IsConsistMock.mutex.Lock()
	mmIsConsist.IsConsistMock.callArgs = append(mmIsConsist.IsConsistMock.callArgs, &mm_params)
	mmIsConsist.IsConsistMock.mutex.Unlock()

	for _, e := range mmIsConsist.IsConsistMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmIsConsist.IsConsistMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsConsist.IsConsistMock.defaultExpectation.Counter, 1)
		mm_want := mmIsConsist.IsConsistMock.defaultExpectation.params
		mm_want_ptrs := mmIsConsist.IsConsistMock.defaultExpectation.paramPtrs

		mm_got := StorageMockIsConsistParams{id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmIsConsist.t.Errorf("StorageMock.IsConsist got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmIsConsist.IsConsistMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmIsConsist.t.Errorf("StorageMock.IsConsist got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmIsConsist.IsConsistMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmIsConsist.IsConsistMock.defaultExpectation.results
		if mm_results == nil {
			mmIsConsist.t.Fatal("No results are set for the StorageMock.IsConsist")
		}
		return (*mm_results).b1
	}
	if mmIsConsist.funcIsConsist != nil {
		return mmIsConsist.funcIsConsist(id)
	}
	mmIsConsist.t.Fatalf("Unexpected call to StorageMock.IsConsist. %v", id)
	return
}

// IsConsistAfterCounter returns a count of finished StorageMock.IsConsist invocations
func (mmIsConsist *StorageMock) IsConsistAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsConsist.afterIsConsistCounter)
}

// IsConsistBeforeCounter returns a count of StorageMock.IsConsist invocations
func (mmIsConsist *StorageMock) IsConsistBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsConsist.beforeIsConsistCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.IsConsist.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmIsConsist *mStorageMockIsConsist) Calls() []*StorageMockIsConsistParams {
	mmIsConsist.mutex.RLock()

	argCopy := make([]*StorageMockIsConsistParams, len(mmIsConsist.callArgs))
	copy(argCopy, mmIsConsist.callArgs)

	mmIsConsist.mutex.RUnlock()

	return argCopy
}

// MinimockIsConsistDone returns true if the count of the IsConsist invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockIsConsistDone() bool {
	if m.IsConsistMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.IsConsistMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.IsConsistMock.invocationsDone()
}

// MinimockIsConsistInspect logs each unmet expectation
func (m *StorageMock) MinimockIsConsistInspect() {
	for _, e := range m.IsConsistMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.IsConsist at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterIsConsistCounter := mm_atomic.LoadUint64(&m.afterIsConsistCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.IsConsistMock.defaultExpectation != nil && afterIsConsistCounter < 1 {
		if m.IsConsistMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StorageMock.IsConsist at\n%s", m.IsConsistMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StorageMock.IsConsist at\n%s with params: %#v", m.IsConsistMock.defaultExpectation.expectationOrigins.origin, *m.IsConsistMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsConsist != nil && afterIsConsistCounter < 1 {
		m.t.Errorf("Expected call to StorageMock.IsConsist at\n%s", m.funcIsConsistOrigin)
	}

	if !m.IsConsistMock.invocationsDone() && afterIsConsistCounter > 0 {
		m.t.Errorf("Expected %d calls to StorageMock.IsConsist at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.IsConsistMock.expectedInvocations), m.IsConsistMock.expectedInvocationsOrigin, afterIsConsistCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StorageMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddToStorageInspect()

			m.MinimockDeleteFromStorageInspect()

			m.MinimockGetIDsInspect()

			m.MinimockGetItemInspect()

			m.MinimockIsConsistInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddToStorageDone() &&
		m.MinimockDeleteFromStorageDone() &&
		m.MinimockGetIDsDone() &&
		m.MinimockGetItemDone() &&
		m.MinimockIsConsistDone()
}
