// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: PuP-service/v1/pup_service.proto

package pup_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PupService_AcceptOrderV1_FullMethodName = "/pup_service.v1.PupService/AcceptOrderV1"
	PupService_PlaceOrderV1_FullMethodName  = "/pup_service.v1.PupService/PlaceOrderV1"
	PupService_ReturnOrderV1_FullMethodName = "/pup_service.v1.PupService/ReturnOrderV1"
	PupService_ListOrdersV1_FullMethodName  = "/pup_service.v1.PupService/ListOrdersV1"
	PupService_RefundOrderV1_FullMethodName = "/pup_service.v1.PupService/RefundOrderV1"
	PupService_ListReturnsV1_FullMethodName = "/pup_service.v1.PupService/ListReturnsV1"
)

// PupServiceClient is the client API for PupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PupServiceClient interface {
	AcceptOrderV1(ctx context.Context, in *AcceptOrderV1Request, opts ...grpc.CallOption) (*AcceptOrderV1Response, error)
	PlaceOrderV1(ctx context.Context, in *PlaceOrderV1Request, opts ...grpc.CallOption) (*PlaceOrderV1Response, error)
	ReturnOrderV1(ctx context.Context, in *ReturnOrderV1Request, opts ...grpc.CallOption) (*ReturnOrderV1Response, error)
	ListOrdersV1(ctx context.Context, in *ListOrdersV1Request, opts ...grpc.CallOption) (*ListOrdersV1Response, error)
	RefundOrderV1(ctx context.Context, in *RefundOrderV1Request, opts ...grpc.CallOption) (*RefundOrderV1Response, error)
	ListReturnsV1(ctx context.Context, in *ListReturnsV1Request, opts ...grpc.CallOption) (*ListReturnsV1Response, error)
}

type pupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPupServiceClient(cc grpc.ClientConnInterface) PupServiceClient {
	return &pupServiceClient{cc}
}

func (c *pupServiceClient) AcceptOrderV1(ctx context.Context, in *AcceptOrderV1Request, opts ...grpc.CallOption) (*AcceptOrderV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptOrderV1Response)
	err := c.cc.Invoke(ctx, PupService_AcceptOrderV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pupServiceClient) PlaceOrderV1(ctx context.Context, in *PlaceOrderV1Request, opts ...grpc.CallOption) (*PlaceOrderV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceOrderV1Response)
	err := c.cc.Invoke(ctx, PupService_PlaceOrderV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pupServiceClient) ReturnOrderV1(ctx context.Context, in *ReturnOrderV1Request, opts ...grpc.CallOption) (*ReturnOrderV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnOrderV1Response)
	err := c.cc.Invoke(ctx, PupService_ReturnOrderV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pupServiceClient) ListOrdersV1(ctx context.Context, in *ListOrdersV1Request, opts ...grpc.CallOption) (*ListOrdersV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersV1Response)
	err := c.cc.Invoke(ctx, PupService_ListOrdersV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pupServiceClient) RefundOrderV1(ctx context.Context, in *RefundOrderV1Request, opts ...grpc.CallOption) (*RefundOrderV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundOrderV1Response)
	err := c.cc.Invoke(ctx, PupService_RefundOrderV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pupServiceClient) ListReturnsV1(ctx context.Context, in *ListReturnsV1Request, opts ...grpc.CallOption) (*ListReturnsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReturnsV1Response)
	err := c.cc.Invoke(ctx, PupService_ListReturnsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PupServiceServer is the server API for PupService service.
// All implementations must embed UnimplementedPupServiceServer
// for forward compatibility.
type PupServiceServer interface {
	AcceptOrderV1(context.Context, *AcceptOrderV1Request) (*AcceptOrderV1Response, error)
	PlaceOrderV1(context.Context, *PlaceOrderV1Request) (*PlaceOrderV1Response, error)
	ReturnOrderV1(context.Context, *ReturnOrderV1Request) (*ReturnOrderV1Response, error)
	ListOrdersV1(context.Context, *ListOrdersV1Request) (*ListOrdersV1Response, error)
	RefundOrderV1(context.Context, *RefundOrderV1Request) (*RefundOrderV1Response, error)
	ListReturnsV1(context.Context, *ListReturnsV1Request) (*ListReturnsV1Response, error)
	mustEmbedUnimplementedPupServiceServer()
}

// UnimplementedPupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPupServiceServer struct{}

func (UnimplementedPupServiceServer) AcceptOrderV1(context.Context, *AcceptOrderV1Request) (*AcceptOrderV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrderV1 not implemented")
}
func (UnimplementedPupServiceServer) PlaceOrderV1(context.Context, *PlaceOrderV1Request) (*PlaceOrderV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrderV1 not implemented")
}
func (UnimplementedPupServiceServer) ReturnOrderV1(context.Context, *ReturnOrderV1Request) (*ReturnOrderV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrderV1 not implemented")
}
func (UnimplementedPupServiceServer) ListOrdersV1(context.Context, *ListOrdersV1Request) (*ListOrdersV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrdersV1 not implemented")
}
func (UnimplementedPupServiceServer) RefundOrderV1(context.Context, *RefundOrderV1Request) (*RefundOrderV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundOrderV1 not implemented")
}
func (UnimplementedPupServiceServer) ListReturnsV1(context.Context, *ListReturnsV1Request) (*ListReturnsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReturnsV1 not implemented")
}
func (UnimplementedPupServiceServer) mustEmbedUnimplementedPupServiceServer() {}
func (UnimplementedPupServiceServer) testEmbeddedByValue()                    {}

// UnsafePupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PupServiceServer will
// result in compilation errors.
type UnsafePupServiceServer interface {
	mustEmbedUnimplementedPupServiceServer()
}

func RegisterPupServiceServer(s grpc.ServiceRegistrar, srv PupServiceServer) {
	// If the following call pancis, it indicates UnimplementedPupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PupService_ServiceDesc, srv)
}

func _PupService_AcceptOrderV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrderV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PupServiceServer).AcceptOrderV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PupService_AcceptOrderV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PupServiceServer).AcceptOrderV1(ctx, req.(*AcceptOrderV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PupService_PlaceOrderV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PupServiceServer).PlaceOrderV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PupService_PlaceOrderV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PupServiceServer).PlaceOrderV1(ctx, req.(*PlaceOrderV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PupService_ReturnOrderV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnOrderV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PupServiceServer).ReturnOrderV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PupService_ReturnOrderV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PupServiceServer).ReturnOrderV1(ctx, req.(*ReturnOrderV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PupService_ListOrdersV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PupServiceServer).ListOrdersV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PupService_ListOrdersV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PupServiceServer).ListOrdersV1(ctx, req.(*ListOrdersV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PupService_RefundOrderV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundOrderV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PupServiceServer).RefundOrderV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PupService_RefundOrderV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PupServiceServer).RefundOrderV1(ctx, req.(*RefundOrderV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PupService_ListReturnsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReturnsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PupServiceServer).ListReturnsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PupService_ListReturnsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PupServiceServer).ListReturnsV1(ctx, req.(*ListReturnsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PupService_ServiceDesc is the grpc.ServiceDesc for PupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pup_service.v1.PupService",
	HandlerType: (*PupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOrderV1",
			Handler:    _PupService_AcceptOrderV1_Handler,
		},
		{
			MethodName: "PlaceOrderV1",
			Handler:    _PupService_PlaceOrderV1_Handler,
		},
		{
			MethodName: "ReturnOrderV1",
			Handler:    _PupService_ReturnOrderV1_Handler,
		},
		{
			MethodName: "ListOrdersV1",
			Handler:    _PupService_ListOrdersV1_Handler,
		},
		{
			MethodName: "RefundOrderV1",
			Handler:    _PupService_RefundOrderV1_Handler,
		},
		{
			MethodName: "ListReturnsV1",
			Handler:    _PupService_ListReturnsV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PuP-service/v1/pup_service.proto",
}
