// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: PuP-service/v1/pup_service.proto

package pup_service_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AcceptOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderV1RequestMultiError, or nil if none found.
func (m *AcceptOrderV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := AcceptOrderV1RequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AcceptOrderV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetKeepUntilDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptOrderV1RequestValidationError{
					field:  "KeepUntilDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptOrderV1RequestValidationError{
					field:  "KeepUntilDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeepUntilDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptOrderV1RequestValidationError{
				field:  "KeepUntilDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetWeight() <= 0 {
		err := AcceptOrderV1RequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() <= 0 {
		err := AcceptOrderV1RequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PackageType

	// no validation rules for NeedWrapping

	if len(errors) > 0 {
		return AcceptOrderV1RequestMultiError(errors)
	}

	return nil
}

// AcceptOrderV1RequestMultiError is an error wrapping multiple validation
// errors returned by AcceptOrderV1Request.ValidateAll() if the designated
// constraints aren't met.
type AcceptOrderV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderV1RequestMultiError) AllErrors() []error { return m }

// AcceptOrderV1RequestValidationError is the validation error returned by
// AcceptOrderV1Request.Validate if the designated constraints aren't met.
type AcceptOrderV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderV1RequestValidationError) ErrorName() string {
	return "AcceptOrderV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderV1RequestValidationError{}

// Validate checks the field values on AcceptOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderV1ResponseMultiError, or nil if none found.
func (m *AcceptOrderV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AcceptOrderV1ResponseMultiError(errors)
	}

	return nil
}

// AcceptOrderV1ResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptOrderV1Response.ValidateAll() if the designated
// constraints aren't met.
type AcceptOrderV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderV1ResponseMultiError) AllErrors() []error { return m }

// AcceptOrderV1ResponseValidationError is the validation error returned by
// AcceptOrderV1Response.Validate if the designated constraints aren't met.
type AcceptOrderV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderV1ResponseValidationError) ErrorName() string {
	return "AcceptOrderV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderV1ResponseValidationError{}

// Validate checks the field values on PlaceOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderV1RequestMultiError, or nil if none found.
func (m *PlaceOrderV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrderIds()) < 1 {
		err := PlaceOrderV1RequestValidationError{
			field:  "OrderIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_PlaceOrderV1Request_OrderIds_Unique := make(map[uint32]struct{}, len(m.GetOrderIds()))

	for idx, item := range m.GetOrderIds() {
		_, _ = idx, item

		if _, exists := _PlaceOrderV1Request_OrderIds_Unique[item]; exists {
			err := PlaceOrderV1RequestValidationError{
				field:  fmt.Sprintf("OrderIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_PlaceOrderV1Request_OrderIds_Unique[item] = struct{}{}
		}

		// no validation rules for OrderIds[idx]
	}

	if len(errors) > 0 {
		return PlaceOrderV1RequestMultiError(errors)
	}

	return nil
}

// PlaceOrderV1RequestMultiError is an error wrapping multiple validation
// errors returned by PlaceOrderV1Request.ValidateAll() if the designated
// constraints aren't met.
type PlaceOrderV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderV1RequestMultiError) AllErrors() []error { return m }

// PlaceOrderV1RequestValidationError is the validation error returned by
// PlaceOrderV1Request.Validate if the designated constraints aren't met.
type PlaceOrderV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderV1RequestValidationError) ErrorName() string {
	return "PlaceOrderV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlaceOrderV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderV1RequestValidationError{}

// Validate checks the field values on PlaceOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderV1ResponseMultiError, or nil if none found.
func (m *PlaceOrderV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PlaceOrderV1ResponseMultiError(errors)
	}

	return nil
}

// PlaceOrderV1ResponseMultiError is an error wrapping multiple validation
// errors returned by PlaceOrderV1Response.ValidateAll() if the designated
// constraints aren't met.
type PlaceOrderV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderV1ResponseMultiError) AllErrors() []error { return m }

// PlaceOrderV1ResponseValidationError is the validation error returned by
// PlaceOrderV1Response.Validate if the designated constraints aren't met.
type PlaceOrderV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderV1ResponseValidationError) ErrorName() string {
	return "PlaceOrderV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlaceOrderV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderV1ResponseValidationError{}

// Validate checks the field values on ReturnOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderV1RequestMultiError, or nil if none found.
func (m *ReturnOrderV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReturnOrderV1RequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnOrderV1RequestMultiError(errors)
	}

	return nil
}

// ReturnOrderV1RequestMultiError is an error wrapping multiple validation
// errors returned by ReturnOrderV1Request.ValidateAll() if the designated
// constraints aren't met.
type ReturnOrderV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderV1RequestMultiError) AllErrors() []error { return m }

// ReturnOrderV1RequestValidationError is the validation error returned by
// ReturnOrderV1Request.Validate if the designated constraints aren't met.
type ReturnOrderV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderV1RequestValidationError) ErrorName() string {
	return "ReturnOrderV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderV1RequestValidationError{}

// Validate checks the field values on ReturnOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderV1ResponseMultiError, or nil if none found.
func (m *ReturnOrderV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReturnOrderV1ResponseMultiError(errors)
	}

	return nil
}

// ReturnOrderV1ResponseMultiError is an error wrapping multiple validation
// errors returned by ReturnOrderV1Response.ValidateAll() if the designated
// constraints aren't met.
type ReturnOrderV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderV1ResponseMultiError) AllErrors() []error { return m }

// ReturnOrderV1ResponseValidationError is the validation error returned by
// ReturnOrderV1Response.Validate if the designated constraints aren't met.
type ReturnOrderV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderV1ResponseValidationError) ErrorName() string {
	return "ReturnOrderV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderV1ResponseValidationError{}

// Validate checks the field values on ListOrdersV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersV1RequestMultiError, or nil if none found.
func (m *ListOrdersV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListOrdersV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCount() < 0 {
		err := ListOrdersV1RequestValidationError{
			field:  "Count",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InPup

	if len(errors) > 0 {
		return ListOrdersV1RequestMultiError(errors)
	}

	return nil
}

// ListOrdersV1RequestMultiError is an error wrapping multiple validation
// errors returned by ListOrdersV1Request.ValidateAll() if the designated
// constraints aren't met.
type ListOrdersV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersV1RequestMultiError) AllErrors() []error { return m }

// ListOrdersV1RequestValidationError is the validation error returned by
// ListOrdersV1Request.Validate if the designated constraints aren't met.
type ListOrdersV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersV1RequestValidationError) ErrorName() string {
	return "ListOrdersV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersV1RequestValidationError{}

// Validate checks the field values on ListOrdersV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersV1ResponseMultiError, or nil if none found.
func (m *ListOrdersV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersV1ResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersV1ResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersV1ResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrdersV1ResponseMultiError(errors)
	}

	return nil
}

// ListOrdersV1ResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrdersV1Response.ValidateAll() if the designated
// constraints aren't met.
type ListOrdersV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersV1ResponseMultiError) AllErrors() []error { return m }

// ListOrdersV1ResponseValidationError is the validation error returned by
// ListOrdersV1Response.Validate if the designated constraints aren't met.
type ListOrdersV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersV1ResponseValidationError) ErrorName() string {
	return "ListOrdersV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersV1ResponseValidationError{}

// Validate checks the field values on RefundOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundOrderV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundOrderV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundOrderV1RequestMultiError, or nil if none found.
func (m *RefundOrderV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundOrderV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := RefundOrderV1RequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := RefundOrderV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefundOrderV1RequestMultiError(errors)
	}

	return nil
}

// RefundOrderV1RequestMultiError is an error wrapping multiple validation
// errors returned by RefundOrderV1Request.ValidateAll() if the designated
// constraints aren't met.
type RefundOrderV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundOrderV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundOrderV1RequestMultiError) AllErrors() []error { return m }

// RefundOrderV1RequestValidationError is the validation error returned by
// RefundOrderV1Request.Validate if the designated constraints aren't met.
type RefundOrderV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundOrderV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundOrderV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundOrderV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundOrderV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundOrderV1RequestValidationError) ErrorName() string {
	return "RefundOrderV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundOrderV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundOrderV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundOrderV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundOrderV1RequestValidationError{}

// Validate checks the field values on RefundOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundOrderV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundOrderV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundOrderV1ResponseMultiError, or nil if none found.
func (m *RefundOrderV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundOrderV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefundOrderV1ResponseMultiError(errors)
	}

	return nil
}

// RefundOrderV1ResponseMultiError is an error wrapping multiple validation
// errors returned by RefundOrderV1Response.ValidateAll() if the designated
// constraints aren't met.
type RefundOrderV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundOrderV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundOrderV1ResponseMultiError) AllErrors() []error { return m }

// RefundOrderV1ResponseValidationError is the validation error returned by
// RefundOrderV1Response.Validate if the designated constraints aren't met.
type RefundOrderV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundOrderV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundOrderV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundOrderV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundOrderV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundOrderV1ResponseValidationError) ErrorName() string {
	return "RefundOrderV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefundOrderV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundOrderV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundOrderV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundOrderV1ResponseValidationError{}

// Validate checks the field values on ListReturnsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsV1RequestMultiError, or nil if none found.
func (m *ListReturnsV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLimit() <= 0 {
		err := ListReturnsV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := ListReturnsV1RequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListReturnsV1RequestMultiError(errors)
	}

	return nil
}

// ListReturnsV1RequestMultiError is an error wrapping multiple validation
// errors returned by ListReturnsV1Request.ValidateAll() if the designated
// constraints aren't met.
type ListReturnsV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsV1RequestMultiError) AllErrors() []error { return m }

// ListReturnsV1RequestValidationError is the validation error returned by
// ListReturnsV1Request.Validate if the designated constraints aren't met.
type ListReturnsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsV1RequestValidationError) ErrorName() string {
	return "ListReturnsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsV1RequestValidationError{}

// Validate checks the field values on ListReturnsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsV1ResponseMultiError, or nil if none found.
func (m *ListReturnsV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReturns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReturnsV1ResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReturnsV1ResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReturnsV1ResponseValidationError{
					field:  fmt.Sprintf("Returns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReturnsV1ResponseMultiError(errors)
	}

	return nil
}

// ListReturnsV1ResponseMultiError is an error wrapping multiple validation
// errors returned by ListReturnsV1Response.ValidateAll() if the designated
// constraints aren't met.
type ListReturnsV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsV1ResponseMultiError) AllErrors() []error { return m }

// ListReturnsV1ResponseValidationError is the validation error returned by
// ListReturnsV1Response.Validate if the designated constraints aren't met.
type ListReturnsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsV1ResponseValidationError) ErrorName() string {
	return "ListReturnsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsV1ResponseValidationError{}

// Validate checks the field values on ReturnV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnV1MultiError, or nil
// if none found.
func (m *ReturnV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ReturnV1MultiError(errors)
	}

	return nil
}

// ReturnV1MultiError is an error wrapping multiple validation errors returned
// by ReturnV1.ValidateAll() if the designated constraints aren't met.
type ReturnV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnV1MultiError) AllErrors() []error { return m }

// ReturnV1ValidationError is the validation error returned by
// ReturnV1.Validate if the designated constraints aren't met.
type ReturnV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnV1ValidationError) ErrorName() string { return "ReturnV1ValidationError" }

// Error satisfies the builtin error interface
func (e ReturnV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnV1ValidationError{}

// Validate checks the field values on OrderFromListV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderFromListV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderFromListV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderFromListV1MultiError, or nil if none found.
func (m *OrderFromListV1) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderFromListV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for UserId

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetKeepUntilDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderFromListV1ValidationError{
					field:  "KeepUntilDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderFromListV1ValidationError{
					field:  "KeepUntilDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeepUntilDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderFromListV1ValidationError{
				field:  "KeepUntilDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	if len(errors) > 0 {
		return OrderFromListV1MultiError(errors)
	}

	return nil
}

// OrderFromListV1MultiError is an error wrapping multiple validation errors
// returned by OrderFromListV1.ValidateAll() if the designated constraints
// aren't met.
type OrderFromListV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderFromListV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderFromListV1MultiError) AllErrors() []error { return m }

// OrderFromListV1ValidationError is the validation error returned by
// OrderFromListV1.Validate if the designated constraints aren't met.
type OrderFromListV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderFromListV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderFromListV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderFromListV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderFromListV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderFromListV1ValidationError) ErrorName() string { return "OrderFromListV1ValidationError" }

// Error satisfies the builtin error interface
func (e OrderFromListV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderFromListV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderFromListV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderFromListV1ValidationError{}
