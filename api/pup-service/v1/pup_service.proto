syntax = "proto3";

package pup_service;

import "google/api/annotations.proto";
import  "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";


option go_package = "homework/pkg/pup-service;pup_service";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "ПВЗ";
    version: "1.0.0";
    description: "Сервис выполняет функции ПВЗ и доставки"
    "для множества пользователей";
  };
  host: "localhost:7001";
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "api-token",
      value: {
        in: IN_HEADER;
        type: TYPE_API_KEY;
        name: "x-api-token";
        description: "Авторизационный токен";
      }
    };
  };
};


service PupService {
  rpc AcceptOrder(AcceptOrderRequest) returns (AcceptOrderResponse) {
    option (google.api.http) = {
      post: "/AcceptOrder"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Принять заказ";
      description: "Принимает Order Id, User Id, Дату хранения, Вес, Цену, Тип "
          "упаковки и необходимость упаковки о заказе и создает новый заказ";
    };
  }

  rpc PlaceOrder(PlaceOrderRequest) returns (PlaceOrderResponse) {
    option (google.api.http) = {
      patch: "/PlaceOrder"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Доставить заказ";
      description: "Принимает на вход множество Order ID, необходимо чтобы все "
          "ID принадлежали одному пользователю";
    };
  }

  rpc ReturnOrder(ReturnOrderRequest) returns (ReturnOrderResponse) {
    option (google.api.http) = {
      patch: "/ReturnOrder"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Вернуть заказ курьеру";
      description: "Принимает на вход Order ID и возвращает заказ курьеру";
    };
  }

  rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse) {
    option (google.api.http) = {
      get: "/ListOrders"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Список заказов";
      description: "Принимает на вход User ID и два опциональных параметра:\n"
          "1 - Количество заказов. Передается в случае если нужно показать n "
          "последних всевозможных заказов\n"
          "2 - inPuP. Передается в случае если нужно показать ВСЕ заказы, "
          "находящиеся на ПВЗ.";
    };
  }

  rpc RefundOrder(RefundOrderRequest) returns (RefundOrderResponse) {
    option (google.api.http) = {
      patch: "/RefundOrder"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Возврат заказа";
      description: "Принимает на вход OrderId и UserId.Возвращает заказ на ПВЗ";
    };
  }

  rpc ListReturns(ListReturnsRequest) returns (ListReturnsResponse) {
    option (google.api.http) = {
      get: "/ListReturns"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Список возвратов";
      description: "Передается limit и page для пагинации."
          "Показывает все возвраты от клиента на ПВЗ";
    };
  }
}



message AcceptOrderRequest{
  uint32 order_id = 1 [
      (validate.rules).uint32.gt = 0,
      (google.api.field_behavior) = REQUIRED
    ];
  uint32 user_id=2[
      (validate.rules).uint32.gt = 0,
      (google.api.field_behavior) = REQUIRED
    ];
  google.protobuf.Timestamp keep_until_date = 5[
      (google.api.field_behavior) = REQUIRED
    ];
  int32 weight =7[
      (validate.rules).int32.gt = 0,
      (google.api.field_behavior) = REQUIRED
    ];
  int32 price = 8[
      (validate.rules).int32.gt = 0,
      (google.api.field_behavior) = REQUIRED
    ];
  string package_type =9[
    (validate.rules).string = {
      max_len : 10;
      min_len : 0;
    },
       (google.api.field_behavior) = REQUIRED
    ];
  bool need_wrapping = 10[
       (google.api.field_behavior) = REQUIRED
  ];
}

message AcceptOrderResponse{

}


message PlaceOrderRequest{
  repeated uint32 order_ids = 1[
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.unique = true,
    (google.api.field_behavior) = REQUIRED
  ];
}

message PlaceOrderResponse{

}

message ReturnOrderRequest{
  uint32 order_id=1[
    (validate.rules).uint32.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message ReturnOrderResponse{

}

message ListOrdersRequest{
  uint32 user_id=1[
    (validate.rules).uint32.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  int32 count = 2[
    (validate.rules).int32.gte = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  bool in_pup=3[
    (google.api.field_behavior) = REQUIRED
  ];
}

message ListOrdersResponse{
  repeated OrderFromList orders = 1;
}

message RefundOrderRequest{
  uint32 order_id =1[
    (validate.rules).uint32.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  uint32 user_id=2[
    (validate.rules).uint32.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message RefundOrderResponse{

}

message ListReturnsRequest{
  int32 limit = 1[
    (validate.rules).int32.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
  int32 page = 2[
    (validate.rules).int32.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message ListReturnsResponse{
  repeated Return returns = 1;
}



message Return {
  uint32 order_id = 1;
  uint32 user_id =2;
}

message OrderFromList {
  uint32 order_id = 1;
  uint32 user_id =2;
  string state = 3;
  google.protobuf.Timestamp keep_until_date = 4;
  int32 price = 5;
}